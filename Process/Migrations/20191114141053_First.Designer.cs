// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Process.Data;

namespace Process.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191114141053_First")]
    partial class First
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Process.Models.Book.BookLogAuthor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("GoodReads");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Twitter");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("BookLogAuthors");
                });

            modelBuilder.Entity("Process.Models.Book.BookLogBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<long>("BookLogAuthorId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<byte[]>("Image");

                    b.Property<string>("OriginalTitle")
                        .IsRequired();

                    b.Property<int>("Pages");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BookLogBooks");
                });

            modelBuilder.Entity("Process.Models.Book.BookLogBookGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("BookLogBookId");

                    b.Property<long>("BookLogGenreId");

                    b.HasKey("Id");

                    b.HasIndex("BookLogGenreId");

                    b.ToTable("BookLogBookGenres");
                });

            modelBuilder.Entity("Process.Models.Book.BookLogGenre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Genre")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BookLogGenres");
                });

            modelBuilder.Entity("Process.Models.Book.BookLogReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<long>("BookLogBookId");

                    b.Property<int>("Rate");

                    b.Property<string>("Review")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BookLogReviews");
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryBlackWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Word")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Word")
                        .IsUnique();

                    b.ToTable("DiaryBlackWords");
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryHistoryLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<long>("DiaryLogId");

                    b.Property<string>("LogContent")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DiaryLogId");

                    b.ToTable("DiaryHistoryLogs");
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Date")
                        .IsRequired();

                    b.Property<string>("LogContent")
                        .IsRequired();

                    b.Property<long>("LogContentLength");

                    b.Property<string>("UpdateDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("DiaryLogs");
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryLogFeeling", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DiaryLogRateId");

                    b.Property<string>("Feeling")
                        .IsRequired();

                    b.Property<int>("FeelingRate");

                    b.HasKey("Id");

                    b.HasIndex("DiaryLogRateId");

                    b.ToTable("DiaryLogFeelings");
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryLogRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DayKeywords");

                    b.Property<int>("DayRate");

                    b.Property<long>("DiaryLogId");

                    b.HasKey("Id");

                    b.HasIndex("DiaryLogId")
                        .IsUnique();

                    b.ToTable("DiaryLogRates");
                });

            modelBuilder.Entity("Process.Models.Diet.DietFood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<byte[]>("Image");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("DietFoods");
                });

            modelBuilder.Entity("Process.Models.Diet.DietLastSelectedFood", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<long>("DietFoodId");

                    b.HasKey("Id");

                    b.ToTable("DietLastSelectedFoods");
                });

            modelBuilder.Entity("Process.Models.Diet.DietLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Amount")
                        .IsRequired();

                    b.Property<long>("DietFoodId");

                    b.Property<string>("Note");

                    b.HasKey("Id");

                    b.ToTable("DietLogs");
                });

            modelBuilder.Entity("Process.Models.Diet.DietLogKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Keyword")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("DietLogKeywords");
                });

            modelBuilder.Entity("Process.Models.Diet.DietMineralValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("DailyValue")
                        .IsRequired();

                    b.Property<long>("DietNutrientAndEnergyValueId");

                    b.Property<string>("Mineral")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DietNutrientAndEnergyValueId");

                    b.ToTable("DietMineralValues");
                });

            modelBuilder.Entity("Process.Models.Diet.DietNutrientAndEnergyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Calorie")
                        .IsRequired();

                    b.Property<string>("CalorieDailyVal")
                        .IsRequired();

                    b.Property<long>("DietFoodId");

                    b.HasKey("Id");

                    b.HasIndex("DietFoodId")
                        .IsUnique();

                    b.ToTable("DietNutrientAndEnergyValues");
                });

            modelBuilder.Entity("Process.Models.Diet.DietNutrientTypeValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("DailyValue")
                        .IsRequired();

                    b.Property<long>("DietNutrientAndEnergyValueId");

                    b.Property<string>("NutrientType")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Unit")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DietNutrientAndEnergyValueId");

                    b.ToTable("DietNutrientTypeValues");
                });

            modelBuilder.Entity("Process.Models.Diet.DietVitaminValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("DailyValue")
                        .IsRequired();

                    b.Property<long>("DietNutrientAndEnergyValueId");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired();

                    b.Property<string>("Vitamin")
                        .IsRequired()
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("DietNutrientAndEnergyValueId");

                    b.ToTable("DietVitaminValues");
                });

            modelBuilder.Entity("Process.Models.Notebook.Notebook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Notebooks");
                });

            modelBuilder.Entity("Process.Models.Notebook.NotebookLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<long>("NotebookId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("NotebookLogs");
                });

            modelBuilder.Entity("Process.Models.Pocket.PocketAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<long>("PocketCategoryId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PocketActions");
                });

            modelBuilder.Entity("Process.Models.Pocket.PocketBill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<int>("IsPaid");

                    b.Property<double>("PaymentAmount");

                    b.Property<string>("PaymentDate")
                        .IsRequired();

                    b.Property<long>("PocketBillCategoryId");

                    b.HasKey("Id");

                    b.ToTable("PocketBills");
                });

            modelBuilder.Entity("Process.Models.Pocket.PocketBillCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PocketBillCategories");
                });

            modelBuilder.Entity("Process.Models.Pocket.PocketCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PocketCategories");
                });

            modelBuilder.Entity("Process.Models.Pocket.PocketInOut", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedDate");

                    b.Property<string>("Amount")
                        .IsRequired();

                    b.Property<long>("PocketActionId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PocketInOuts");
                });

            modelBuilder.Entity("Process.Models.Pocket.PocketTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BudgetPercent");

                    b.Property<string>("EndDate")
                        .IsRequired();

                    b.Property<string>("StartDate")
                        .IsRequired();

                    b.Property<string>("Target")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PocketTargets");
                });

            modelBuilder.Entity("Process.Models.ToDo.ToDo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<int>("IsDone");

                    b.Property<int>("IsImportant");

                    b.Property<string>("ToDoContent")
                        .IsRequired();

                    b.Property<long>("ToDoListId");

                    b.Property<string>("UpdateDate")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ToDoListId");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("Process.Models.ToDo.ToDoList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LastUpdateDate")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ToDoLists");
                });

            modelBuilder.Entity("Process.Models.Workout.Workout", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("TargetBodyPart")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("WorkoutDescription");

                    b.Property<string>("WorkoutTitle")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTitle")
                        .IsUnique();

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Date")
                        .IsRequired();

                    b.Property<int>("DayNumber");

                    b.Property<int>("IsBreak");

                    b.Property<int>("IsCompleted");

                    b.Property<long>("WorkoutPlanId");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("WorkoutDays");
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<int>("IsCompleted");

                    b.Property<int>("Repeats");

                    b.Property<int>("Sets");

                    b.Property<long>("WorkoutDayId");

                    b.Property<long>("WorkoutId");

                    b.Property<long>("WorkoutTargetId");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutDayId");

                    b.ToTable("WorkoutLogs");
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutMeasurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodyPart")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Measurement")
                        .IsRequired();

                    b.Property<long>("WorkoutResultId");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutResultId");

                    b.ToTable("WorkoutMeasurements");
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Description");

                    b.Property<string>("ExpireDate")
                        .IsRequired();

                    b.Property<int>("IsCompleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("WorkoutPlans");
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<string>("Weight1")
                        .IsRequired();

                    b.Property<string>("Weight2")
                        .IsRequired();

                    b.Property<string>("Weight3")
                        .IsRequired();

                    b.Property<long>("WorkoutPlanId");

                    b.Property<string>("WorkoutPlanNotes");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutPlanId")
                        .IsUnique();

                    b.ToTable("WorkoutResults");
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutTarget", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedDate")
                        .IsRequired();

                    b.Property<int>("RequiredRepeats");

                    b.Property<int>("RequiredSets");

                    b.Property<long>("WorkoutId");

                    b.Property<long>("WorkoutPlanId");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutPlanId");

                    b.ToTable("WorkoutTargets");
                });

            modelBuilder.Entity("Process.Models.Book.BookLogBookGenre", b =>
                {
                    b.HasOne("Process.Models.Book.BookLogGenre", "BookLogGenre")
                        .WithMany()
                        .HasForeignKey("BookLogGenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryHistoryLog", b =>
                {
                    b.HasOne("Process.Models.Diary.DiaryLog")
                        .WithMany("DiaryHistoryLogs")
                        .HasForeignKey("DiaryLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryLogFeeling", b =>
                {
                    b.HasOne("Process.Models.Diary.DiaryLogRate")
                        .WithMany("DiaryLogFeelings")
                        .HasForeignKey("DiaryLogRateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Diary.DiaryLogRate", b =>
                {
                    b.HasOne("Process.Models.Diary.DiaryLog")
                        .WithOne("DiaryLogRate")
                        .HasForeignKey("Process.Models.Diary.DiaryLogRate", "DiaryLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Diet.DietMineralValue", b =>
                {
                    b.HasOne("Process.Models.Diet.DietNutrientAndEnergyValue")
                        .WithMany("DietMineralValues")
                        .HasForeignKey("DietNutrientAndEnergyValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Diet.DietNutrientTypeValue", b =>
                {
                    b.HasOne("Process.Models.Diet.DietNutrientAndEnergyValue")
                        .WithMany("DietNutrientTypeValues")
                        .HasForeignKey("DietNutrientAndEnergyValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Diet.DietVitaminValue", b =>
                {
                    b.HasOne("Process.Models.Diet.DietNutrientAndEnergyValue")
                        .WithMany("DietVitaminValues")
                        .HasForeignKey("DietNutrientAndEnergyValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.ToDo.ToDo", b =>
                {
                    b.HasOne("Process.Models.ToDo.ToDoList")
                        .WithMany("ToDos")
                        .HasForeignKey("ToDoListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutDay", b =>
                {
                    b.HasOne("Process.Models.Workout.WorkoutPlan")
                        .WithMany("WorkoutDays")
                        .HasForeignKey("WorkoutPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutLog", b =>
                {
                    b.HasOne("Process.Models.Workout.WorkoutDay")
                        .WithMany("WorkoutLogs")
                        .HasForeignKey("WorkoutDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutMeasurement", b =>
                {
                    b.HasOne("Process.Models.Workout.WorkoutResult")
                        .WithMany("WorkoutMeasurements")
                        .HasForeignKey("WorkoutResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutResult", b =>
                {
                    b.HasOne("Process.Models.Workout.WorkoutPlan")
                        .WithOne("WorkoutResult")
                        .HasForeignKey("Process.Models.Workout.WorkoutResult", "WorkoutPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Process.Models.Workout.WorkoutTarget", b =>
                {
                    b.HasOne("Process.Models.Workout.WorkoutPlan")
                        .WithMany("WorkoutTargets")
                        .HasForeignKey("WorkoutPlanId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
